diff -uarN naoqi_driver/src/converters/nao_footprint.hpp naoqi_driver_dvlab/src/converters/nao_footprint.hpp
--- naoqi_driver/src/converters/nao_footprint.hpp	2021-02-13 13:51:20.428313943 +0100
+++ naoqi_driver_dvlab/src/converters/nao_footprint.hpp	2021-02-13 14:02:51.812022858 +0100
@@ -39,19 +39,19 @@
 
 inline void addBaseFootprint( boost::shared_ptr<tf2_ros::Buffer> tf2_buffer, std::vector<geometry_msgs::TransformStamped>& tf_transforms, const ros::Time& time )
 {
-  bool canTransform = tf2_buffer->canTransform("odom", "l_sole", time, ros::Duration(0.1) );
+  bool canTransform = tf2_buffer->canTransform("base_link", "l_sole", time, ros::Duration(0.1) );
   if (!canTransform)
   {
     ROS_ERROR_STREAM("Do not calculate NAO Footprint, no transform possible " << time);
     return;
   }
 
-  geometry_msgs::TransformStamped tf_odom_to_base, tf_odom_to_left_foot, tf_odom_to_right_foot;
+  geometry_msgs::TransformStamped tf_base_to_left_foot, tf_base_to_right_foot;
   try {
     // TRANSFORM THEM DIRECTLY INTO TRANSFORM
-    tf_odom_to_left_foot  = tf2_buffer->lookupTransform("odom", "l_sole",    time );
-    tf_odom_to_right_foot = tf2_buffer->lookupTransform("odom", "r_sole",    time );
-    tf_odom_to_base       = tf2_buffer->lookupTransform("odom", "base_link", time );
+    tf_base_to_left_foot  = tf2_buffer->lookupTransform("base_link", "l_sole",    time );
+    tf_base_to_right_foot = tf2_buffer->lookupTransform("base_link", "r_sole",    time );
+    //tf_odom_to_base       = tf2_buffer->lookupTransform("odom", "base_link", time );
   } catch (const tf2::TransformException& ex){
     ROS_ERROR("NAO Footprint error %s",ex.what());
     return ;
@@ -59,17 +59,18 @@
   // middle of both feet
   // z = fix to the lowest foot
   tf2::Vector3 new_origin(
-      float(tf_odom_to_right_foot.transform.translation.x + tf_odom_to_left_foot.transform.translation.x)/2.0,
-      float(tf_odom_to_right_foot.transform.translation.y + tf_odom_to_left_foot.transform.translation.y)/2.0,
-      std::min(tf_odom_to_left_foot.transform.translation.z, tf_odom_to_right_foot.transform.translation.z)
+      float(tf_base_to_right_foot.transform.translation.x + tf_base_to_left_foot.transform.translation.x)/2.0,
+      float(tf_base_to_right_foot.transform.translation.y + tf_base_to_left_foot.transform.translation.y)/2.0,
+      std::max(tf_base_to_left_foot.transform.translation.z, tf_base_to_right_foot.transform.translation.z)
       );
 
   // adjust yaw according to torso orientation, all other angles 0 (= in z-plane)
-  double yaw = helpers::transform::getYaw( tf_odom_to_base.transform ) ;
+  /* double yaw = helpers::transform::getYaw( tf_odom_to_base.transform ) ;*/
   tf2::Quaternion new_q;
-  new_q.setRPY(0.0f, 0.0f, yaw);
-  tf2::Transform tf_odom_to_footprint( new_q, new_origin);
+  new_q.setRPY(0.0f, 0.0f, 0.0f); 
+  tf2::Transform tf_base_to_foot( new_q, new_origin);
 
+  /*
   // way too complicated here, there should be proper conversions!
   tf2::Quaternion q( tf_odom_to_base.transform.rotation.x,
                      tf_odom_to_base.transform.rotation.y,
@@ -82,23 +83,23 @@
       );
   tf2::Transform tf_odom_to_base_conv( q,r);
   //tf2::Transform tf_odom_to_base_conv;
-  //tf2::convert( tf_odom_to_base.transform, tf_odom_to_base_conv );
-  tf2::Transform tf_base_to_footprint = tf_odom_to_base_conv.inverse() * tf_odom_to_footprint;
+  //tf2::convert( tf_odom_to_base.transform, tf_odom_to_base_conv ); */
+  tf2::Transform tf_foot_to_base = tf_base_to_foot.inverse();
 
   // convert it back to geometry_msgs
   geometry_msgs::TransformStamped message;
   //message.transform = tf2::toMsg(tf_base_to_footprint);
   message.header.stamp = time;
-  message.header.frame_id = "base_link";
-  message.child_frame_id = "base_footprint";
+  message.header.frame_id = "base_footprint";
+  message.child_frame_id = "base_link";
 
-  message.transform.rotation.x = tf_base_to_footprint.getRotation().x();
-  message.transform.rotation.y = tf_base_to_footprint.getRotation().y();
-  message.transform.rotation.z = tf_base_to_footprint.getRotation().z();
-  message.transform.rotation.w = tf_base_to_footprint.getRotation().w();
-  message.transform.translation.x = tf_base_to_footprint.getOrigin().x();
-  message.transform.translation.y = tf_base_to_footprint.getOrigin().y();
-  message.transform.translation.z = tf_base_to_footprint.getOrigin().z();
+  message.transform.rotation.x = tf_foot_to_base.getRotation().x();
+  message.transform.rotation.y = tf_foot_to_base.getRotation().y();
+  message.transform.rotation.z = tf_foot_to_base.getRotation().z();
+  message.transform.rotation.w = tf_foot_to_base.getRotation().w();
+  message.transform.translation.x = tf_foot_to_base.getOrigin().x();
+  message.transform.translation.y = tf_foot_to_base.getOrigin().y();
+  message.transform.translation.z = tf_foot_to_base.getOrigin().z();
 
   //tf::transformTFToMsg( tf_base_to_footprint, message.transform);
   // publish transform with parent m_baseFrameId and new child m_baseFootPrintID
